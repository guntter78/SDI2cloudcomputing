---
- name: Install WordPress on containers
  hosts: localhost
  become: yes
  connection: local
  vars:
    wordpress_db_name: wordpress
    wordpress_db_user: wp_user
    wordpress_db_password: strongpassword
    wordpress_db_host: localhost
    wordpress_site_url: "http://{{ ansible_default_ipv4.address }}"
    wordpress_site_title: "My WordPress Site"
    wordpress_admin_user: admin
    wordpress_admin_password: adminpassword
    wordpress_admin_email: admin@example.com
    ansible_python_interpreter: /usr/bin/python3
    mysql_root_password: your_root_password

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      ignore_errors: yes

    - name: Install required packages (Apache, MySQL, PHP, and Curl)
      apt:
        name:
          - apache2
          - mysql-server
          - php
          - php-mysql
          - libapache2-mod-php
          - php-cli
          - php-curl
          - php-gd
          - php-mbstring
          - php-xml
          - php-xmlrpc
          - curl
          - wget
        state: present
      ignore_errors: yes

    - name: Ensure MySQL root user has password authentication
      mysql_user:
        name: root
        host: localhost
        password: "{{ mysql_root_password }}"
        priv: '*.*:ALL,GRANT'
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock
      ignore_errors: yes

    - name: Start and enable MySQL
      service:
        name: mysql
        state: started
        enabled: true
      ignore_errors: yes

    # Nieuwe MySQL taken met shell
    - name: Create WordPress MySQL database using shell
      shell: |
        mysql -u root -p"{{ mysql_root_password }}" -e "CREATE DATABASE IF NOT EXISTS {{ wordpress_db_name }};"
      ignore_errors: no

    - name: Create WordPress MySQL user and grant privileges using shell
      shell: |
        mysql -u root -p"{{ mysql_root_password }}" -e "CREATE USER IF NOT EXISTS '{{ wordpress_db_user }}'@'localhost' IDENTIFIED BY '{{ wordpress_db_password }}';"
        mysql -u root -p"{{ mysql_root_password }}" -e "GRANT ALL PRIVILEGES ON {{ wordpress_db_name }}.* TO '{{ wordpress_db_user }}'@'localhost';"
        mysql -u root -p"{{ mysql_root_password }}" -e "FLUSH PRIVILEGES;"
      ignore_errors: no

    - name: Download WordPress
      get_url:
        url: https://wordpress.org/latest.tar.gz
        dest: /tmp/latest.tar.gz
      ignore_errors: yes

    - name: Extract WordPress locally in container
      unarchive:
        src: /tmp/latest.tar.gz
        dest: /var/www/html/
        creates: /var/www/html/wp-config-sample.php
      ignore_errors: yes

    - name: Verify WordPress files are in the right place
      command: ls -l /var/www/html
      ignore_errors: yes

    - name: Set proper permissions for WordPress
      file:
        path: /var/www/html
        owner: www-data
        group: www-data
        mode: '0755'
        recurse: yes
      ignore_errors: yes

    - name: Create wp-config.php
      copy:
        dest: /var/www/html/wp-config.php
        content: |
          <?php
          define('DB_NAME', '{{ wordpress_db_name }}');
          define('DB_USER', '{{ wordpress_db_user }}');
          define('DB_PASSWORD', '{{ wordpress_db_password }}');
          define('DB_HOST', '{{ wordpress_db_host }}');
          define('WP_SITEURL', '{{ wordpress_site_url }}');
          define('WP_HOME', '{{ wordpress_site_url }}');
          define('FS_METHOD', 'direct');
          ?>
        owner: www-data
        group: www-data
        mode: '0644'
      ignore_errors: yes

    - name: Enable Apache rewrite module
      command: a2enmod rewrite
      ignore_errors: yes

    - name: Disable PrivateTmp in Apache service
      replace:
        path: /lib/systemd/system/apache2.service
        regexp: 'PrivateTmp=true'
        replace: 'PrivateTmp=false'
      ignore_errors: yes

    - name: Disable ProtectSystem in Apache service
      replace:
        path: /lib/systemd/system/apache2.service
        regexp: 'ProtectSystem=full'
        replace: '#ProtectSystem=full'
      ignore_errors: yes

    - name: Disable ProtectHome in Apache service
      replace:
        path: /lib/systemd/system/apache2.service
        regexp: 'ProtectHome=true'
        replace: '#ProtectHome=true'
      ignore_errors: yes

    - name: Remove [Install] section from Apache service
      lineinfile:
        path: /lib/systemd/system/apache2.service
        regexp: '\[Install\]'
        state: absent
      ignore_errors: yes

    - name: Add custom settings to [Service] section in Apache service
      blockinfile:
        path: /lib/systemd/system/apache2.service
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          PrivateTmp=false
          ProtectSystem=false
          ProtectHome=false
        insertafter: '\[Service\]'
      ignore_errors: yes

    - name: Reload systemd
      command: systemctl daemon-reload
      ignore_errors: yes

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
      ignore_errors: yes

    - name: Check if WordPress is accessible
      uri:
        url: "http://localhost"
        status_code: 200
      ignore_errors: yes
